package {	import away3d.audio.Sound3D;	import away3d.containers.View3D;	import away3d.core.base.Object3D;	import away3d.materials.ColorMaterial;	import away3d.primitives.Sphere;		import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.Sound;	import flash.text.TextField;	import flash.text.TextFormat;		import mx.core.SoundAsset;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import away3d.audio.drivers.SimplePanVolumeDriver;	[SWF(width="800", height="600", backgroundColor="#000000", frameRate="25")]	public class Intermediate_Sound3D extends Sprite	{		private var _view : View3D;		private var _sound : Sound3D;		private var _marker : Object3D;				private var _map : Sprite;		private var _cam_marker : Shape;		private var _map_marker : Shape;						[Embed('assets/test-mono.mp3')]		private var TestAudio:Class;				public function Intermediate_Sound3D()		{			_init();		}				private function _init() : void		{			_init3D();			_initInterface();			_initText();						addEventListener(Event.ENTER_FRAME, _handleEnterFrame_render);			stage.addEventListener(MouseEvent.CLICK, _handleStageClick_togglePlayback);			stage.addEventListener(MouseEvent.MOUSE_MOVE, _handleMouseMove_updatePositions);			stage.addEventListener(KeyboardEvent.KEY_DOWN, _handleStageKeyDown_rotateCamera);		}						private function _init3D() : void		{			var sound:Sound;						_view = new View3D({ x: 400, y: 300 });			_view.camera.moveTo(0, 0, 0);			_view.stats = false;			addChild(_view);						// Create regular flash sound object from embedded sound file			sound = new TestAudio as SoundAsset;						// Create 3d sound source with camera as listener/reference			//_sound = new Sound3D(sound, this._view.camera, { driver: new HRTFDriver() } );			_sound = new Sound3D(sound, _view.camera, new SimplePanVolumeDriver());			_view.scene.addChild(_sound);						// Debug cube so we know where the 3d sound source is positioned			//_marker = new Cube( { width: 10, height: 10, depth: 10 });			_marker = new Sphere({ segmentsW: 20, segmentsH: 20, radius: 20, material : new ColorMaterial(0x0000ff) });			_view.scene.addChild(_marker);		}						private function _initInterface() : void		{			_map = new Sprite;			_map.x = _map.y = 50;			_map.scaleX = _map.scaleY = 0.5;						// Background plate			_map.graphics.beginFill(0xffffff);			_map.graphics.drawRect(-100, -100, 200, 200);			_map.graphics.endFill();						// Camera			_cam_marker = new Shape;			_cam_marker.graphics.lineStyle(1, 0);			_cam_marker.graphics.moveTo(0, 5);			_cam_marker.graphics.lineTo(-4, -4);			_cam_marker.graphics.lineTo(4, -4);			_cam_marker.graphics.lineTo(0, 5);			_map.addChild(_cam_marker);						// Sound marker on map			_map_marker = new Shape;			_map_marker.graphics.beginFill(0xffffff);			_map_marker.graphics.lineStyle(1, 0x0000ff);			_map_marker.graphics.drawCircle(0, 0, 5);			_map_marker.graphics.endFill();			_map_marker.graphics.drawCircle(0, 0, 2);			_map.addChild(_map_marker);						addChild(_map);		} 								private function _initText() : void		{ 			var str : String;			var tf : TextField = new TextField();						tf.defaultTextFormat = new TextFormat('Arial', 11);						str  = '<b>Away3D demo - Sound3D (by Richard Olsson)</b>\n';			str += 'Simulating sound source orientation in 3D space.\n'; 			str += 'This demo is using the simple pan/volume driver.\n\n';			 			str += '- Move mouse to reposition sound source\n';			str += '- Click to toggle playback\n\n';						str += 'Song is Giant Wide - See The Road'; 						tf.htmlText = str;			tf.textColor = 0xffffff;						tf.x = 110;			tf.y = 10;			tf.width = tf.textWidth+10;			tf.height = 200;			tf.selectable = false;			tf.mouseEnabled = false;			this.addChild(tf);		}						private function _redrawOverhead() : void		{			var xpos : Number = Math.max(-1000, Math.min(1000, _sound.x));			var zpos : Number = Math.max(-1000, Math.min(1000, _sound.z));						_map_marker.x = xpos/10;			_map_marker.y = -zpos/10;						_cam_marker.rotation = _view.camera.rotationY;		}						private function _handleStageClick_togglePlayback(ev : MouseEvent) : void		{			_sound.play();			//_sound.togglePlayPause();		}						private function _handleMouseMove_updatePositions(ev : MouseEvent) : void		{			var ypos : Number;						_marker.x = 2 * (stage.mouseX - stage.stageWidth/2);			_marker.z = -4 * (stage.mouseY - stage.stageHeight/2);						_sound.x = _marker.x;			_sound.z = _marker.z;		}						private function _handleStageKeyDown_rotateCamera(ev : KeyboardEvent) : void		{			switch (ev.keyCode) {				case Keyboard.LEFT:		_view.camera.rotationY -= 5;	break;				case Keyboard.RIGHT:	_view.camera.rotationY += 5;	break;			}		}						private function _handleEnterFrame_render(ev:Event) : void		{			_view.render();						_redrawOverhead();		}	}}